Archive member included because of file (symbol)

/usr/lib/gcc/avr/4.8.1/avr4/libgcc.a(_exit.o)
                              /usr/lib/gcc/avr/4.8.1/../../../avr/lib/avr4/crtm8.o (exit)
/usr/lib/gcc/avr/4.8.1/avr4/libgcc.a(_clear_bss.o)
                              nl_main.o (__do_clear_bss)
/usr/lib/gcc/avr/4.8.1/../../../avr/lib/avr4/libc.a(memcpy.o)
                              rfm12.o (memcpy)
/usr/lib/gcc/avr/4.8.1/../../../avr/lib/avr4/libc.a(eerd_byte_atmega8.o)
                              nl_main.o (__eerd_byte_m8)

Allocating common symbols
Common symbol       size              file

ctrl                0x6               rfm12.o
rf_rx_buffers       0x98              rfm12.o
rf_tx_buffer        0x3f              rfm12.o

Memory Configuration

Name             Origin             Length             Attributes
text             0x0000000000000000 0x0000000000002000 xr
data             0x0000000000800060 0x000000000000ffa0 rw !x
eeprom           0x0000000000810000 0x0000000000010000 rw !x
fuse             0x0000000000820000 0x0000000000000400 rw !x
lock             0x0000000000830000 0x0000000000000400 rw !x
signature        0x0000000000840000 0x0000000000000400 rw !x
user_signatures  0x0000000000850000 0x0000000000000400 rw !x
*default*        0x0000000000000000 0xffffffffffffffff

Linker script and memory map

LOAD /usr/lib/gcc/avr/4.8.1/../../../avr/lib/avr4/crtm8.o
Address of section .text set to 0x1800
LOAD nl_main.o
LOAD rfm12.o
START GROUP
LOAD /usr/lib/gcc/avr/4.8.1/avr4/libgcc.a
LOAD /usr/lib/gcc/avr/4.8.1/../../../avr/lib/avr4/libm.a
LOAD /usr/lib/gcc/avr/4.8.1/../../../avr/lib/avr4/libc.a
END GROUP

.hash
 *(.hash)

.dynsym
 *(.dynsym)

.dynstr
 *(.dynstr)

.gnu.version
 *(.gnu.version)

.gnu.version_d
 *(.gnu.version_d)

.gnu.version_r
 *(.gnu.version_r)

.rel.init
 *(.rel.init)

.rela.init
 *(.rela.init)

.rel.text
 *(.rel.text)
 *(.rel.text.*)
 *(.rel.gnu.linkonce.t*)

.rela.text
 *(.rela.text)
 *(.rela.text.*)
 *(.rela.gnu.linkonce.t*)

.rel.fini
 *(.rel.fini)

.rela.fini
 *(.rela.fini)

.rel.rodata
 *(.rel.rodata)
 *(.rel.rodata.*)
 *(.rel.gnu.linkonce.r*)

.rela.rodata
 *(.rela.rodata)
 *(.rela.rodata.*)
 *(.rela.gnu.linkonce.r*)

.rel.data
 *(.rel.data)
 *(.rel.data.*)
 *(.rel.gnu.linkonce.d*)

.rela.data
 *(.rela.data)
 *(.rela.data.*)
 *(.rela.gnu.linkonce.d*)

.rel.ctors
 *(.rel.ctors)

.rela.ctors
 *(.rela.ctors)

.rel.dtors
 *(.rel.dtors)

.rela.dtors
 *(.rela.dtors)

.rel.got
 *(.rel.got)

.rela.got
 *(.rela.got)

.rel.bss
 *(.rel.bss)

.rela.bss
 *(.rela.bss)

.rel.plt
 *(.rel.plt)

.rela.plt
 *(.rela.plt)

.text           0x0000000000001800      0x438
 *(.vectors)
 .vectors       0x0000000000001800       0x26 /usr/lib/gcc/avr/4.8.1/../../../avr/lib/avr4/crtm8.o
                0x0000000000001800                __vectors
                0x0000000000001800                __vector_default
 *(.vectors)
 *(.progmem.gcc*)
                0x0000000000001826                . = ALIGN (0x2)
                0x0000000000001826                __trampolines_start = .
 *(.trampolines)
 .trampolines   0x0000000000001826        0x0 linker stubs
 *(.trampolines*)
                0x0000000000001826                __trampolines_end = .
 *(.progmem*)
                0x0000000000001826                . = ALIGN (0x2)
 *(.jumptables)
 *(.jumptables*)
 *(.lowtext)
 *(.lowtext*)
                0x0000000000001826                __ctors_start = .
 *(.ctors)
                0x0000000000001826                __ctors_end = .
                0x0000000000001826                __dtors_start = .
 *(.dtors)
                0x0000000000001826                __dtors_end = .
 SORT(*)(.ctors)
 SORT(*)(.dtors)
 *(.init0)
 .init0         0x0000000000001826        0x0 /usr/lib/gcc/avr/4.8.1/../../../avr/lib/avr4/crtm8.o
                0x0000000000001826                __init
 *(.init0)
 *(.init1)
 *(.init1)
 *(.init2)
 .init2         0x0000000000001826        0xc /usr/lib/gcc/avr/4.8.1/../../../avr/lib/avr4/crtm8.o
 *(.init2)
 *(.init3)
 *(.init3)
 *(.init4)
 .init4         0x0000000000001832       0x10 /usr/lib/gcc/avr/4.8.1/avr4/libgcc.a(_clear_bss.o)
                0x0000000000001832                __do_clear_bss
 *(.init4)
 *(.init5)
 *(.init5)
 *(.init6)
 *(.init6)
 *(.init7)
 *(.init7)
 *(.init8)
 *(.init8)
 *(.init9)
 .init9         0x0000000000001842        0x4 /usr/lib/gcc/avr/4.8.1/../../../avr/lib/avr4/crtm8.o
 *(.init9)
 *(.text)
 .text          0x0000000000001846        0x2 /usr/lib/gcc/avr/4.8.1/../../../avr/lib/avr4/crtm8.o
                0x0000000000001846                __vector_1
                0x0000000000001846                __vector_12
                0x0000000000001846                __bad_interrupt
                0x0000000000001846                __vector_6
                0x0000000000001846                __vector_3
                0x0000000000001846                __vector_11
                0x0000000000001846                __vector_13
                0x0000000000001846                __vector_17
                0x0000000000001846                __vector_7
                0x0000000000001846                __vector_5
                0x0000000000001846                __vector_4
                0x0000000000001846                __vector_9
                0x0000000000001846                __vector_2
                0x0000000000001846                __vector_15
                0x0000000000001846                __vector_8
                0x0000000000001846                __vector_14
                0x0000000000001846                __vector_10
                0x0000000000001846                __vector_16
                0x0000000000001846                __vector_18
 .text          0x0000000000001848       0x7a nl_main.o
                0x0000000000001848                boot_program_page
 .text          0x00000000000018c2      0x2d2 rfm12.o
                0x0000000000001948                rfm12_poll
                0x0000000000001a5a                rfm12_tick
                0x0000000000001a98                rfm12_start_tx
                0x0000000000001abe                rfm12_tx
                0x0000000000001af4                rfm12_rx_clear
                0x0000000000001b10                rfm12_init
 .text          0x0000000000001b94        0x0 /usr/lib/gcc/avr/4.8.1/avr4/libgcc.a(_exit.o)
 .text          0x0000000000001b94        0x0 /usr/lib/gcc/avr/4.8.1/avr4/libgcc.a(_clear_bss.o)
 .text          0x0000000000001b94        0x0 /usr/lib/gcc/avr/4.8.1/../../../avr/lib/avr4/libc.a(memcpy.o)
 .text          0x0000000000001b94        0x0 /usr/lib/gcc/avr/4.8.1/../../../avr/lib/avr4/libc.a(eerd_byte_atmega8.o)
                0x0000000000001b94                . = ALIGN (0x2)
 *(.text.*)
 .text.startup  0x0000000000001b94       0x7e nl_main.o
                0x0000000000001b94                main
 .text.libgcc.mul
                0x0000000000001c12        0x0 /usr/lib/gcc/avr/4.8.1/avr4/libgcc.a(_exit.o)
 .text.libgcc.div
                0x0000000000001c12        0x0 /usr/lib/gcc/avr/4.8.1/avr4/libgcc.a(_exit.o)
 .text.libgcc   0x0000000000001c12        0x0 /usr/lib/gcc/avr/4.8.1/avr4/libgcc.a(_exit.o)
 .text.libgcc.prologue
                0x0000000000001c12        0x0 /usr/lib/gcc/avr/4.8.1/avr4/libgcc.a(_exit.o)
 .text.libgcc.builtins
                0x0000000000001c12        0x0 /usr/lib/gcc/avr/4.8.1/avr4/libgcc.a(_exit.o)
 .text.libgcc.fmul
                0x0000000000001c12        0x0 /usr/lib/gcc/avr/4.8.1/avr4/libgcc.a(_exit.o)
 .text.libgcc.fixed
                0x0000000000001c12        0x0 /usr/lib/gcc/avr/4.8.1/avr4/libgcc.a(_exit.o)
 .text.libgcc.mul
                0x0000000000001c12        0x0 /usr/lib/gcc/avr/4.8.1/avr4/libgcc.a(_clear_bss.o)
 .text.libgcc.div
                0x0000000000001c12        0x0 /usr/lib/gcc/avr/4.8.1/avr4/libgcc.a(_clear_bss.o)
 .text.libgcc   0x0000000000001c12        0x0 /usr/lib/gcc/avr/4.8.1/avr4/libgcc.a(_clear_bss.o)
 .text.libgcc.prologue
                0x0000000000001c12        0x0 /usr/lib/gcc/avr/4.8.1/avr4/libgcc.a(_clear_bss.o)
 .text.libgcc.builtins
                0x0000000000001c12        0x0 /usr/lib/gcc/avr/4.8.1/avr4/libgcc.a(_clear_bss.o)
 .text.libgcc.fmul
                0x0000000000001c12        0x0 /usr/lib/gcc/avr/4.8.1/avr4/libgcc.a(_clear_bss.o)
 .text.libgcc.fixed
                0x0000000000001c12        0x0 /usr/lib/gcc/avr/4.8.1/avr4/libgcc.a(_clear_bss.o)
 .text.avr-libc
                0x0000000000001c12       0x12 /usr/lib/gcc/avr/4.8.1/../../../avr/lib/avr4/libc.a(memcpy.o)
                0x0000000000001c12                memcpy
 .text.avr-libc
                0x0000000000001c24       0x10 /usr/lib/gcc/avr/4.8.1/../../../avr/lib/avr4/libc.a(eerd_byte_atmega8.o)
                0x0000000000001c24                __eerd_byte_m8
                0x0000000000001c34                . = ALIGN (0x2)
 *(.fini9)
 .fini9         0x0000000000001c34        0x0 /usr/lib/gcc/avr/4.8.1/avr4/libgcc.a(_exit.o)
                0x0000000000001c34                exit
                0x0000000000001c34                _exit
 *(.fini9)
 *(.fini8)
 *(.fini8)
 *(.fini7)
 *(.fini7)
 *(.fini6)
 *(.fini6)
 *(.fini5)
 *(.fini5)
 *(.fini4)
 *(.fini4)
 *(.fini3)
 *(.fini3)
 *(.fini2)
 *(.fini2)
 *(.fini1)
 *(.fini1)
 *(.fini0)
 .fini0         0x0000000000001c34        0x4 /usr/lib/gcc/avr/4.8.1/avr4/libgcc.a(_exit.o)
 *(.fini0)
                0x0000000000001c38                _etext = .

.data           0x0000000000800060        0x0 load address 0x0000000000001c38
                0x0000000000800060                PROVIDE (__data_start, .)
 *(.data)
 .data          0x0000000000800060        0x0 /usr/lib/gcc/avr/4.8.1/../../../avr/lib/avr4/crtm8.o
 .data          0x0000000000800060        0x0 nl_main.o
 .data          0x0000000000800060        0x0 rfm12.o
 .data          0x0000000000800060        0x0 /usr/lib/gcc/avr/4.8.1/avr4/libgcc.a(_exit.o)
 .data          0x0000000000800060        0x0 /usr/lib/gcc/avr/4.8.1/avr4/libgcc.a(_clear_bss.o)
 .data          0x0000000000800060        0x0 /usr/lib/gcc/avr/4.8.1/../../../avr/lib/avr4/libc.a(memcpy.o)
 .data          0x0000000000800060        0x0 /usr/lib/gcc/avr/4.8.1/../../../avr/lib/avr4/libc.a(eerd_byte_atmega8.o)
 *(.data*)
 *(.rodata)
 *(.rodata*)
 *(.gnu.linkonce.d*)
                0x0000000000800060                . = ALIGN (0x2)
                0x0000000000800060                _edata = .
                0x0000000000800060                PROVIDE (__data_end, .)

.bss            0x0000000000800060       0xdf
                0x0000000000800060                PROVIDE (__bss_start, .)
 *(.bss)
 .bss           0x0000000000800060        0x0 /usr/lib/gcc/avr/4.8.1/../../../avr/lib/avr4/crtm8.o
 .bss           0x0000000000800060        0x1 nl_main.o
 .bss           0x0000000000800061        0x1 rfm12.o
 .bss           0x0000000000800062        0x0 /usr/lib/gcc/avr/4.8.1/avr4/libgcc.a(_exit.o)
 .bss           0x0000000000800062        0x0 /usr/lib/gcc/avr/4.8.1/avr4/libgcc.a(_clear_bss.o)
 .bss           0x0000000000800062        0x0 /usr/lib/gcc/avr/4.8.1/../../../avr/lib/avr4/libc.a(memcpy.o)
 .bss           0x0000000000800062        0x0 /usr/lib/gcc/avr/4.8.1/../../../avr/lib/avr4/libc.a(eerd_byte_atmega8.o)
 *(.bss*)
 *(COMMON)
 COMMON         0x0000000000800062       0xdd rfm12.o
                0x0000000000800062                ctrl
                0x0000000000800068                rf_rx_buffers
                0x0000000000800100                rf_tx_buffer
                0x000000000080013f                PROVIDE (__bss_end, .)
                0x0000000000001c38                __data_load_start = LOADADDR (.data)
                0x0000000000001c38                __data_load_end = (__data_load_start + SIZEOF (.data))

.noinit         0x000000000080013f        0x0
                0x000000000080013f                PROVIDE (__noinit_start, .)
 *(.noinit*)
                0x000000000080013f                PROVIDE (__noinit_end, .)
                0x000000000080013f                _end = .
                0x000000000080013f                PROVIDE (__heap_start, .)

.eeprom         0x0000000000810000        0x0
 *(.eeprom*)
                0x0000000000810000                __eeprom_end = .

.fuse
 *(.fuse)
 *(.lfuse)
 *(.hfuse)
 *(.efuse)

.lock
 *(.lock*)

.signature
 *(.signature*)

.user_signatures
 *(.user_signatures*)

.stab           0x0000000000000000     0x15a8
 *(.stab)
 .stab          0x0000000000000000      0x87c nl_main.o
 .stab          0x000000000000087c      0xd2c rfm12.o
                                        0xf18 (size before relaxing)

.stabstr        0x0000000000000000     0x131c
 *(.stabstr)
 .stabstr       0x0000000000000000     0x131c nl_main.o

.stab.excl
 *(.stab.excl)

.stab.exclstr
 *(.stab.exclstr)

.stab.index
 *(.stab.index)

.stab.indexstr
 *(.stab.indexstr)

.comment        0x0000000000000000       0x11
 *(.comment)
 .comment       0x0000000000000000       0x11 nl_main.o
                                         0x12 (size before relaxing)
 .comment       0x0000000000000000       0x12 rfm12.o

.note.gnu.build-id
 *(.note.gnu.build-id)

.debug
 *(.debug)

.line
 *(.line)

.debug_srcinfo
 *(.debug_srcinfo)

.debug_sfnames
 *(.debug_sfnames)

.debug_aranges
 *(.debug_aranges)

.debug_pubnames
 *(.debug_pubnames)

.debug_info
 *(.debug_info .gnu.linkonce.wi.*)

.debug_abbrev
 *(.debug_abbrev)

.debug_line
 *(.debug_line .debug_line.* .debug_line_end)

.debug_frame
 *(.debug_frame)

.debug_str
 *(.debug_str)

.debug_loc
 *(.debug_loc)

.debug_macinfo
 *(.debug_macinfo)

.debug_weaknames
 *(.debug_weaknames)

.debug_funcnames
 *(.debug_funcnames)

.debug_typenames
 *(.debug_typenames)

.debug_varnames
 *(.debug_varnames)

.debug_pubtypes
 *(.debug_pubtypes)

.debug_ranges
 *(.debug_ranges)

.debug_macro
 *(.debug_macro)
OUTPUT(nl_main elf32-avr)
LOAD linker stubs
